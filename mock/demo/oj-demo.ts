import type { MockMethod } from 'vite-plugin-mock';
import { resultSuccess } from '../_util';

const ojValue = () => {
  return '## 1.服务器要求\n\n> 下面的建议不包含minio的内存占用，如需使用minio，请另外考虑\n\n1. 核心数和内存大小有两种方案：\n   - 2核4G（使用ES搜索策略）\n   - 2核2G（使用MySQL搜素策略）\n\n2. 带宽大小有两种方案：\n   - 使用oss对带宽没有要求（本人亲测：1M带宽+oss 访问速度很快）\n   - 使用minio需要大一点的带宽（小带宽也可以，但需要使用cdn加速）\n\n## 2.docker的安装\n\n> 以下命令基于CentOS环境。\n\n1. 下载工具\n\n   ```shell\n   yum install -y yum-utils\n   ```\n\n2. 设置镜像的仓库\n\n   ```shell\n   yum-config-manager \\\n       --add-repo \\\n       https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  #配置阿里云的镜像\n   ```\n\n3. 更新yum软件包索引\n\n   ```shell\n   yum makecache fast\n   ```\n\n4. 安装docker相关配置\n\n   ```shell\n   yum install docker-ce docker-ce-cli containerd.io\n   ```\n\n5. 启动docker\n\n   ```shell\n   systemctl start docker\n   # 查看当前版本号，是否启动成功\n   docker version\n   # 设置开机自启动\n   systemctl enable docker\n   ```\n\n****\n\n## 3.安装mysql\n\n### 方式1: 无挂载模式\n\n> 这种方式直接运行mysql之后，所有关于mysql的内容都在容器中，后续如果需要修改mysql的内容，需要手动进入容器内进行操作。且在宿主机上无备份，一旦容器被删除，数据也会被删除。\n\n```shell\ndocker pull mysql //下载MySQL镜像\ndocker run --name mysql --restart=always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 -d mysql //启动MySQL\n```\n\n### 方式2: 数据卷挂载模式\n\n> 和**无挂载模式相对**，通过数据卷挂载的方式运行容器，将容器内的部分重要文件映射到宿主机上。直接操作宿主机对应的映射文件就能和容器内作同步，方便操作的同时还能保证容器内的数据在宿主机上有一个备份。\n>\n> 下面的命令分别对mysql的日志文件、配置文件、数据文件进行了映射，你也可以自己修改。\n\n```shell\ndocker run --name mysql --restart=always -p 3306:3306 -v /mnt/aurora/mysql/log:/var/log/mysql -v /mnt/aurora/mysql/data:/var/lib/mysql -v /mnt/aurora/mysql/conf:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=syk2001416 -d mysql\n```\n\n****\n\n## 4.安装redis\n\n```shell\ndocker pull redis //下载Redis镜像\ndocker run --name redis  --restart=always -p 6379:6379 -d redis --requirepass "密码" //启动Redis\n```\n\n## 5.安装rabbitmq\n\n```shell\ndocker pull rabbitmq:management //下载RabbitMQ镜像\ndocker run --name rabbit --restart=always -p 15672:15672 -p 5672:5672  -d  rabbitmq:management   //启动RabbitMQ,默认guest用户，密码也是guest。\n```\n\n## 6.安装elasticsearch\n\n```shell\ndocker pull elasticsearch:7.9.2\n```\n\n```shell\nmkdir -p  /home/elasticsearch/data/ \nmkdir -p  /home/elasticsearch/config/\n```\n\n1. 编写配置文件\n\n   ```shell\n   echo \'http.host: 0.0.0.0\n   http.cors.enabled: true\n   http.cors.allow-origin: "*" \'>>/home/elasticsearch/config/elasticsearch.yml\n   ```\n\n2. 修改文件夹权限\n\n   ```shell\n   chmod -R 777 /home/elasticsearch/\n   ls -l # 查看文件权限\n   ```\n\n3. 启动elasticseach镜像\n\n   ```shell\n   docker run --name elasticsearch -p 9200:9200 \\\n    -p 9300:9300 \\\n    -e "discovery.type=single-node" \\\n    -e ES_JAVA_OPTS="-Xms64m -Xmx128m" \\\n     -v /home/elasticsearch/config/elasticsearch.yml:/usr/shellare/elasticsearch/config/elasticsearch.yml \\\n    -v /home/elasticsearch/data:/usr/shellare/elasticsearch/data \\\n    -v /home/elasticsearch/plugins:/usr/shellare/elasticsearch/plugins \\\n    -d elasticsearch:7.9.2\n   ```\n\n接下来我们就是拿浏览器访问啦。\n\n在浏览器上输入：服务器IP地址:9200\n\n可能出现的问题：\n\n1. 启动成功，但是访问失败的话，查看一下安全组中映射端口是否已经打开。如果是本地虚拟机，可能与防火墙相关（我用的云服务器，没有测试，如果有问题，还是需要大家自行去百度||谷歌一下）。\n\n2. -e ES_JAVA_OPTS="-Xms64m -Xmx128m"：配置内存大小出现了问题。\n\n3. 最后就还有可能是配置文件中出现了问题。\n\n   ```shell\n   echo \'http.host: 0.0.0.0\n   http.cors.enabled: true\n   http.cors.allow-origin: "*" \'>>/home/elasticsearch/config/elasticsearch.yml\n   ```\n\n   `http.host: 0.0.0.0` 在冒号后面有一个空格的，这里的配置文件是`yml`格式,所以一定要严格按照`yml`格式来书写。\n\n安装ik分词器\n\n进入已经启动成功的elasticsearch容器。\n\n```shell\ndocker exec -it elasticsearch /bin/bash\n```\n\n```shell\n./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.2/elasticsearch-analysis-ik-7.9.2.zip\n```\n\nps: `安装的ik分词器的版本一定要与elasticsearch的版本保持一致`\n\n下载过程中如果遇到选择，直接输入 y回车就可以了。\n\n下载完成之后，退出去，重新启动elasticsearch容器。\n\n```shell\ndocker restart elasticsearch\n```\n\n测试ik分词器是否安装成功\n\n安装完成后，我们再来进行测试遍，看看有什么样的变化。\n\npostman post请求分词测试：`http://服务器IP地址:9200/_analyze`\n\n```json\n{\n\t"tokenizer":"ik_smart",\n\t"text":"我爱技术"\n}\n```\n\n结果\n\n```shell\n{\n    "tokens": [\n        {\n            "token": "我",\n            "start_offset": 0,\n            "end_offset": 1,\n            "type": "CN_CHAR",\n            "position": 0\n        },\n        {\n            "token": "爱",\n            "start_offset": 1,\n            "end_offset": 2,\n            "type": "CN_CHAR",\n            "position": 1\n        },\n        {\n            "token": "技术",\n            "start_offset": 2,\n            "end_offset": 4,\n            "type": "CN_WORD",\n            "position": 2\n        }\n    ]\n}\n```\n\n## 7.安装MaxWell\n\n```sh\ndocker pull zendesk/maxwell //下载MaxWell镜像\ndocker run --name maxwell --restart=always  -d  zendesk/maxwell bin/maxwell  --user=\'数据库用户名\' --password=\'数据库密码\'  --host=\'IP地址\'  --producer=rabbitmq --rabbitmq_user=\'MQ用户名\' --rabbitmq_pass=\'MQ密码\' --rabbitmq_host=\'IP地址\' --rabbitmq_port=\'5672\' --rabbitmq_exchange=\'maxwell_exchange\'  --rabbitmq_exchange_type=\'fanout\' --rabbitmq_exchange_durable=\'true\' --filter=\'exclude: *.*, include: aurora.t_article.article_title = *, include: aurora.t_article.article_content = *, include: aurora.t_article.is_delete = *, include: aurora.t_article.status = *\' //运行MaxWell\n```\n\n```sh\ndocker pull zendesk/maxwell //下载MaxWell镜像\ndocker run --name maxwell --restart=always  -d  zendesk/maxwell bin/maxwell  --user=\'root\' --password=\'syk20010416\'  --host=\'43.143.196.151\'  --producer=rabbitmq --rabbitmq_user=\'guest\' --rabbitmq_pass=\'guest\' --rabbitmq_host=\'43.143.196.151\' --rabbitmq_port=\'5672\' --rabbitmq_exchange=\'maxwell_exchange\'  --rabbitmq_exchange_type=\'fanout\' --rabbitmq_exchange_durable=\'true\' --filter=\'exclude: *.*, include: aurora.t_article.article_title = *, include: aurora.t_article.article_content = *, include: aurora.t_article.is_delete = *, include: aurora.t_article.status = *\' //运行MaxWell\n```\n\n注意：上述命令中aurora为数据库名称。\n\n****\n\n## 8.填写aurora-springboot中的yml文件\n\n此处省略，操作比较简单，就是配置一些简单的ip+端口+用户名+密码，前提是服务器上对应的端口已经打开\n\n阿里云oss具体情况详见百度\n\nQQ互联具体情况详见百度\n\n这里就不赘述了\n\n## 9.打包运行后端项目\n\n1. 使用idea右侧Maven的package命令\n\n2. 在服务器的/usr/local/下面创建名为aurora-springboot的文件夹\n\n3. 将打包好的jar包传到服务器上面的/usr/local/aurora-springboot下面\n\n4. 编写Dockerfile,同时将编写好的Dockerfile传输到服务器的/usr/local/aurora-springboot下面\n\n```dockerfile\nFROM openjdk:8\nVOLUME /tmp\nADD aurora-springboot-0.0.1.jar blog.jar\nENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/blog.jar"]\n```\n\n> 注意：Dockerfile文件只需要上传到指定目录下即可，不需要手动执行其他操作。\n\n5. 编写aurora-start.sh,同时将编写好的aurora-start.sh上传到服务器的/usr/local/docker下面\n\n```shell\nSOURCE_PATH=/usr/local/aurora-springboot\nSERVER_NAME=aurora-springboot-0.0.1.jar\nTAG=latest\nSERVER_PORT=8080\nCID=$(docker ps | grep "$SERVER_NAME" | awk \'{print $1}\')\nIID=$(docker images | grep "$SERVER_NAME" | awk \'{print $3}\')\nif [ -n "$CID" ]; then\n  echo "存在容器$SERVER_NAME,CID-$CID"\n  docker stop $CID\n  echo "成功停止容器$SERVER_NAME,CID-$CID"\n  docker rm $CID\n  echo "成功删除容器$SERVER_NAME,CID-$CID"\nfi\nif [ -n "$IID" ]; then\n  echo "存在镜像$SERVER_NAME:$TAG,IID=$IID"\n  docker rmi $IID\n  echo "成功删除镜像$SERVER_NAME:$TAG,IID=$IID"\nfi\necho "开始构建镜像$SERVER_NAME:$TAG"\ncd $SOURCE_PATH\ndocker build -t $SERVER_NAME:$TAG .\necho "成功构建镜像$SERVER_NAME:$TAG"\ndocker run --restart=always --name aurora-springboot-0.0.1.jar -d -p 8080:8080 aurora-springboot-0.0.1.jar:latest\necho "成功创建并运行容器$SERVER_NAME"\n```\n\n**注意事项：sh文件需要用notepad++转为Unix格式**\n\n具体操作：点开notepad++中的编辑 ---> 文档格式转换 --->转为Unix \n\n6. cd到/usr/local/docker下面 ，执行如下命令打包docker镜像文件\n\n```shell\nsh aurora-start.sh\n```\n\n7. 启动容器\n\n```sh\ndocker run  --name aurora-springboot-0.0.1.jar -d -p 8080:8080 aurora-springboot-0.0.1.jar:latest\n```\n\n8. 这样后端项目就可以在服务器上跑起来了\n\n9. 访问测试(浏览器上访问)\n\n   ```shell\n   ip:8080\n   ```\n\n****\n\n## 10.打包运行前端项目\n\n1. aurora-blog项目中，更改src/config/config.ts\n\n   ```typescript\n     captcha: {\n       TENCENT_CAPTCHA: \'你自己的天御验证码\'\n     },\n     qqLogin: {\n       QQ_APP_ID: \'你自己的APP_ID\',\n       QQ_REDIRECT_URI: \'https://你的前台域名/oauth/login/qq\'\n     },\n   ```\n\n2. aurora-blog项目中，更改public/index.html\n\n   ```html\n   <script\n         src="http://connect.qq.com/qc_jssdk.js"\n         data-appid="你自己的APP_ID"\n         data-redirecturi="https://你的前台域名/oauth/login/qq"></script>\n   ```\n\n3. 如果你的网站没有打算使用https,将aurora-blog/public/index.html和aurora-admin/public/index.html中下面这一行代码给注释掉\n\n   ```html\n   <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />\n   ```\n\n4. 分别到aurora-blog和aurora-admin下面执行如下命令 (推荐关闭vscode的Eslint,本项目没有遵循Eslint的规范)\n\n   如果下列命令执行报错，可以尝试替换版本\n\n   参考版本：npm版本为：8.3.1    vue-cli的版本为：5.0.6\n\n   ```shell\n   npm install\n   npm run build\n   ```\n\n5. 在服务器的/usr/local/下面创建名为aurora-vue的文件夹，\n\n6. 将打包好的前台代码重命名为blog, 并传输到服务器的/usr/local/aurora-vue下面\n\n7. 将打包好的后台代码重命名为admin, 并传输到服务器的/usr/local/aurora-vue下面\n\n## 11.安装并启动nginx\n\n### 方式1: http\n\n1. 拉取nginx镜像\n\n   ```shell\n   docker pull nginx\n   ```\n\n2. 在/usr/local/nginx下创建nginx.conf文件，格式如下\n\n   ```shell\n   events {\n       worker_connections  1024;\n   }\n   \n   http {\n       include       mime.types;\n       default_type  application/octet-stream;\n       sendfile        on;\n       keepalive_timeout  65;\n   \n       client_max_body_size     50m;\n       client_body_buffer_size  10m; \n       client_header_timeout    1m;\n       client_body_timeout      1m;\n   \n       gzip on;\n       gzip_min_length  1k;\n       gzip_buffers     4 16k;\n       gzip_comp_level  4;\n       gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n       gzip_vary on;\n   \n   server {\n           listen       80;\n           server_name  前台域名;\n        \n           location / {\t\t\n               root   /usr/local/aurora-vue/blog;\n               index  index.html index.htm; \n               try_files $uri $uri/ /index.html;\t\n           }\n   \t\t\t\n   \tlocation ^~ /api/ {\t\t\n               proxy_pass http://服务器ip:8080/;\n   \t       proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\t\t\t\t\t\t\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \t\t\n       }\n   \t\n   server {\n           listen       80;\n           server_name  后台子域名;\n        \n           location / {\t\t\n               root   /usr/local/aurora-vue/admin;\n               index  index.html index.htm; \n               try_files $uri $uri/ /index.html;\t\n           }\n   \t\t\t\n   \tlocation ^~ /api/ {\t\t\n               proxy_pass http://服务器ip:8080/;\n   \t    proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\t\t\t\t\t\t\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \t\t\n       }\n    }\n   ```\n\n3. 启动nginx\n\n   ```shell\n   docker run --name nginx --restart=always -p 80:80 -d -v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf -v /usr/local/vue:/usr/local/vue nginx \n   ```\n\n### 方式2: https\n\n1. 拉取nginx镜像\n\n   ```shell\n   docker pull nginx\n   ```\n\n2. 修改配置文件\n\n   ```shell\n   events {\n       worker_connections  1024;\n   }\n   \n   http {\n       include       mime.types;\n       default_type  application/octet-stream;\n       sendfile        on;\n       keepalive_timeout  65;\n   \n       client_max_body_size     50m;\n       client_body_buffer_size  10m; \t  \n       client_header_timeout    1m;\n       client_body_timeout      1m;\n   \n       gzip on;\n       gzip_min_length  1k;\n       gzip_buffers     4 16k;\n       gzip_comp_level  4;\n       gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n       gzip_vary on;\n   \t\n   server {\n   \n           listen  443 ssl;\n           server_name  前台域名;\n   \n           ssl on;\n           ssl_certificate ssl证书文件位置; \n   \t   ssl_certificate_key ssl证书文件位置; \n           ssl_session_timeout 5m;\n           ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n           ssl_prefer_server_ciphers on;\n   \n          location / {\n               root   /usr/local/vue/blog;\n               index  index.html index.htm;\n               try_files $uri $uri/ /index.html;\n           }\n   \t\t\n           location ^~ /api/ {\n               proxy_pass http://服务器ip:8080/;\n               proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \n       }\n   \n   server {\n   \n           listen  443 ssl;\n           server_name 后台域名;\n   \n           ssl on;\n           ssl_certificate ssl证书文件位置;\n           ssl_certificate_key ssl文件位置; \n           ssl_session_timeout 5m;\n           ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n           ssl_prefer_server_ciphers on;\n   \n          location / {\n               root   /usr/local/vue/admin;\n               index  index.html index.htm;\n               try_files $uri $uri/ /index.html;\n           }\n   \t\t\n           location ^~ /api/ {\n               proxy_pass http://服务器ip:8080/;\n               proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \t\n       }\n   \n   \n   \n   server {\n           listen       80;\n           server_name  前台域名;\n           rewrite ^(.*)$\thttps://$host$1\tpermanent;\n   \t\t\n       }\n   \t\n   server {\n           listen       80;\n           server_name  后台域名;\n           rewrite ^(.*)$\thttps://$host$1\tpermanent;\n   \t\t\n       }\t\n   }\n   ```\n\n3. 启动nginx\n\n   ```shell\n   docker run --name nginx --restart=always -p 443:443 -p 80:80 -d -v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf -v /usr/local/nginx/cert:/etc/nginx/cert -v /usr/local/aurora-vue:/usr/local/aurora-vue --privileged=true nginx\n   ```\n\n\nuser root;\nevents {\n        worker_connections  1024;\n   }\n\n   http {\n       include       mime.types;\n       default_type  application/octet-stream;\n       sendfile        on;\n       keepalive_timeout  65;\n\n       client_max_body_size     50m;\n       client_body_buffer_size  10m;\n       client_header_timeout    1m;\n       client_body_timeout      1m;\n\n       gzip on;\n       gzip_min_length  1k;\n       gzip_buffers     4 16k;\n       gzip_comp_level  4;\n       gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n       gzip_vary on;\n\n   server {\n\n           listen  443 ssl;\n           server_name  www.luoxian.tech;\n\n           ssl on;\n           ssl_certificate /etc/nginx/cert/luoxian.tech_bundle.pem;\n           ssl_certificate_key /etc/nginx/cert/luoxian.tech.key;\n           ssl_session_timeout 5m;\n           ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n           ssl_prefer_server_ciphers on;\n\n          location / {\n               root   /usr/local/aurora-vue/blog;\n               index  index.html index.htm;\n               try_files $uri $uri/ /index.html;\n           }\n\n           location ^~ /api/ {\n               proxy_pass http://43.143.196.151:8080/;\n               proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n   \n}\n\n       }\n\n   server {\n\n           listen  443 ssl;\n           server_name admin.luoxian.tech;\n\n           ssl on;\n           ssl_certificate /etc/nginx/cert/luoxian.tech_bundle.pem;\n           ssl_certificate_key /etc/nginx/cert/luoxian.tech.key;\n           ssl_session_timeout 5m;\n           ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n           ssl_prefer_server_ciphers on;\n\n          location / {\n               root   /usr/local/aurora-vue/admin;\n               index  index.html index.htm;\n               try_files $uri $uri/ /index.html;\n           }\n\n           location ^~ /api/ {\n               proxy_pass http://43.143.196.151:8080/;\n               proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n\n       }\n\n\n\n   server {\n           listen       80;\n           server_name  www.luoxian.tech;\n           rewrite ^(.*)$       https://$host$1 permanent;\n\n       }\n\n   server {\n           listen       80;\n           server_name  admin.luoxian.tech;\n           rewrite ^(.*)$       https://$host$1 permanent;\n\n       }\n   }\n\n   docker run -p 6379:6379 --name redis -v /mnt/aurora/redis/conf/redis.conf:/etc/redis/redis.conf  -v /mnt/aurora/redis/conf/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes\n\n   docker run --name minio \\\n-p 9000:9000 \\\n-p 9090:9090 \\\n-d --restart=always \\\n-e "MINIO_ROOT_USER=minioadmin" \\\n-e "MINIO_ROOT_PASSWORD=minioadmin" \\\n-v /home/minio/data:/data \\\n-v /home/minio/config:/root/.minio \\\nminio/minio server /data \\\n--address \':9000\' \\\n--console-address \':9090\'';
};

export default [
  {
    url: '/api/oj/value',
    method: 'get',
    response: () => {
      return resultSuccess({
        data: ojValue,
      });
    },
  },
] as MockMethod[];
